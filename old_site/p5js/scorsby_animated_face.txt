
let headDiameter;
let headX, headY;
let headSwayAmplitudeX = 60;
let headSwayAmplitudeY = 30;

let default_ppi = 300;
let default_grid_width = default_ppi;

let ear_size = .5;
let ear_dist = 1/5;

let eyeX, eyeY;

let eye_hdist = 1/12;
let eye_vdist = 1/26;
let eye_size = 1/3;

let pupil_size = 1/6;
let pupilX, pupilY;

let n_pupils = 6;
let pupil_Sizes = new Array(n_pupils).fill(0); 

let blinkcircles = [];
let blinkfrequency = 1;
let duration = 0.2;

let nose_size = 1/5;
let nose_dist = 1/22;
let noseX, noseY;

let mouth_weight = 10;
let mouth_width = 1/8;
let mouth_smile = 1/2;
let smileX, smileY;

let faceX, faceY;

let wiggle_room = 1.3


function cmykToRgb(cmykArray) {
    // Extract CMYK values from the array
    let [c, m, y, k] = cmykArray;

    // Convert CMYK to RGB
    let r = 255 * (1 - c / 100) * (1 - k / 100);
    let g = 255 * (1 - m / 100) * (1 - k / 100);
    let b = 255 * (1 - y / 100) * (1 - k / 100);

    // Round and return the RGB values in an array
    return [Math.round(r), Math.round(g), Math.round(b)];
}

function pointsToPixels(points, ppi = default_ppi) {
    return points * (ppi / 72);
}

function drawGrid(mainSpacing = default_grid_width, division = 8, mainStrokeWeight = 2, subStrokeWeight = 1) {
    // Draw main grid lines (bolder)
    strokeWeight(mainStrokeWeight);
    stroke(200);
    for (let x = 0; x <= width; x += mainSpacing) {
        line(x, 0, x, height); // Vertical lines
    }
    for (let y = 0; y <= height; y += mainSpacing) {
        line(0, y, width, y); // Horizontal lines
    }

    // Draw subdivision grid lines (thinner)
    strokeWeight(subStrokeWeight);
    stroke(225);
    let subSpacing = mainSpacing / division;
    for (let x = 0; x <= width; x += subSpacing) {
        if (x % mainSpacing !== 0) { // Avoid redrawing over main lines
            line(x, 0, x, height); // Vertical lines
        }
    }
    for (let y = 0; y <= height; y += subSpacing) {
        if (y % mainSpacing !== 0) { // Avoid redrawing over main lines
            line(0, y, width, y); // Horizontal lines
        }
    }
}

function setup() {
  
  //c_width = 1728;
  c_width = default_grid_width*4;
  createCanvas(c_width, c_width);
  
  //circleDiameter = width/2;
  headDiameter = default_grid_width*2;
  
  headX = width/2;
  headY = height/2;
  
  faceX = width / 2; // Initial nose position
  faceY = height / 2; // Initial nose position
  
  smileX = width / 2; // Initial nose position
  smileY = height / 2; // Initial nose position
  
  eyeX = width / 2; // Initial nose position
  eyeY = height / 2; // Initial nose position
  
  pupilX = width / 2; // Initial nose position
  pupilY = height / 2; // Initial nose position
  
  noseX = width / 2; // Initial nose position
  noseY = height / 2; // Initial nose position
  
}

/*function animatePupils() {
    let angleStep = TWO_PI / n_pupils;

    //translate(width / 2, height / 2); // Move the origin to the center of the canvas

    for (let i = 0; i < n_pupils; i++) {
        let angle = i * angleStep;
        let x = (eye_size / 2) * cos(angle);
        let y = (eye_size / 2) * sin(angle);

        // Update the size of the circle
        pupil_Sizes[i] += 2;
        if (pupil_Sizes[i] > headDiameter*eye_size) {
            pupil_Sizes[i] = 0; // Reset the size
        }

        // Alternate colors
        fill(pupil_Sizes[i] % 2 === 0 ? 0 : 255);

        // Draw the circle
        circle(width / 2 - width*eye_hdist, height/2 - height*eye_vdist, pupil_Sizes[i]);
    circle(width / 2 + width*eye_hdist, height/2 - height*eye_vdist, pupil_Sizes[i]);
    }
}*/

/*function animatePupils() {
    let maxSize = width * pupil_size; // Maximum size of pupils
    let increment = maxSize / n_pupils; // Size increment per pupil

    for (let i = 0; i < n_pupils; i++) {
        // Calculate size for each pupil based on its index and frame count
        let size = (frameCount + i * increment) % maxSize;

        // Alternate colors
        fill(i % 2 === 0 ? 0 : 255);

        // Draw the pupils
        circle(width / 2 - width * eye_hdist, height / 2 - height * eye_vdist, size);
        circle(width / 2 + width * eye_hdist, height / 2 - height * eye_vdist, size);
    }
}*/

function animateCrazyPupils() {
    let maxSize = width * pupil_size; // Maximum size of pupils
    let increment = maxSize / n_pupils; // Size increment per pupil
    let pupils = [];

    // Create and calculate size for each pupil
    for (let i = 0; i < n_pupils; i++) {
        let size = (frameCount + i * increment) % maxSize;
        pupils.push({ index: i, size: size });
    }

    // Sort pupils by size, smallest last
    pupils.sort((a, b) => b.size - a.size);

    // Determine the color of the largest pupil
    let largestPupilColor = pupils[n_pupils - 1].index % 2 === 0 ? 0 : 255;

    // Draw the eye backgrounds

  
    fill([255,255,255]);
    circle(eyeX - width * eye_hdist, eyeY - height * eye_vdist, headDiameter * eye_size);   
    circle(eyeX + width * eye_hdist, eyeY - height * eye_vdist, headDiameter * eye_size);
  
    //blinking
    // Add a new circle at the specified frequency
    if (frameCount % (frequency * 60) === 0) { // 60 frames per second
        circles.push({
            x: random(width),
            y: random(height),
            size: random(10, 50),
            remainingTime: duration * 60 // Convert seconds to frames
        });
    }

    // Update and draw circles
    for (let i = circles.length - 1; i >= 0; i--) {
        let circle = circles[i];
        ellipse(circle.x, circle.y, circle.size);

        // Decrease the remaining time
        circle.remainingTime--;

        // Remove the circle if its time has elapsed
        if (circle.remainingTime <= 0) {
            circles.splice(i, 1);
        }
    }
  
  
    fill([0,0,0])
    circle(pupilX - width * eye_hdist, pupilY - height * eye_vdist, headDiameter * pupil_size);   
    circle(pupilX + width * eye_hdist, pupilY - height * eye_vdist, headDiameter * pupil_size);
  
}



function draw() {
    background(255);
  
    drawGrid();
  
    // Calculate the radius
    let radius = headDiameter / 2;
  
    // Set the stroke (outline) color of the circle
  
    let black = cmykToRgb([0,0,0,100])
  
    let white = cmykToRgb([0,0,0,0])
    
    let scyan = cmykToRgb([70.47, 34.1, 0, 0]);
  
    let magenta = cmykToRgb([0, 100, 0, 0]);
  
    let red = [255,0,0];
  
    //stroke(...black); // RGB values for color
    noStroke()
  
    // Set the stroke weight (thickness) of the circle
    strokeWeight(pointsToPixels(5)); // Pixels

    // Set the fill color of the circle
    fill(...scyan); // RGB values for color
  
    // Draw the circle
    // The circle is drawn at the center of the canvas
  
    // Calculate the head's swaying motion
    let sway_x = headSwayAmplitudeX * sin(frameCount * 0.03);
    let sway_y = headSwayAmplitudeY * sin(frameCount * 0.03) * cos(frameCount * 0.03);
    // Update the head's X position based on the swaying motion
    headX = width / 2 + sway_x;
    headY = height / 2 + (sway_y);
  
    circle(headX, headY, headDiameter);
    //circle(width / 2, height / 2, headDiameter);
  
    faceX += (headX - faceX) * 0.2;
    faceY += (headY - faceY) * 0.2;
  
    eyeX += (headX - faceX) * .2;
    eyeY += (headY - faceY) * 0.2;
    pupilX += (headX - faceX) * .25;
    pupilY += (headY - faceY) * 0.22;
  
    noseX += (headX - faceX) * .2;
    noseY += (headY - faceY) * .2;
  
    smileX += (headX - faceX) * .2;
    smileY += (headY - faceY) * .2;
  
    // ears
    circle(faceX - width*ear_dist, faceY - height*ear_dist, headDiameter*ear_size);
    circle(faceX + width*ear_dist, faceY - height*ear_dist, headDiameter*ear_size);
  
    //eyes
    animateCrazyPupils();

    // nose
    fill(...red);
    circle(noseX,noseY+height*nose_dist + (smileY/32),headDiameter*nose_size);
  
    // mouth
    
    noFill();
    strokeWeight(pointsToPixels(10));
    stroke(...black);
    curve(
      smileX - width*mouth_width,pupilY - height/2,
      smileX - width*mouth_width,smileY + height/12,
      smileX + width*mouth_width,smileY + height/12,
      smileX + width*mouth_width,pupilY - height/2
    )
}